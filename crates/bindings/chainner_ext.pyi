from __future__ import annotations

from typing import Dict, List

import numpy as np

# pylint: disable=unused-argument,missing-class-docstring,missing-function-docstring

def fill_alpha_fragment_blur(
    img: np.ndarray, threshold: float, iterations: int, fragment_count: int
) -> np.ndarray: ...
def fill_alpha_extend_color(
    img: np.ndarray, threshold: float, iterations: int
) -> np.ndarray: ...
def fill_alpha_nearest_color(
    img: np.ndarray, threshold: float, min_radius: int, anti_aliasing: bool
) -> np.ndarray: ...

class RustRegex:
    @property
    def pattern(self) -> str: ...
    @property
    def groups(self) -> int: ...
    @property
    def groupindex(self) -> Dict[str, int]: ...
    def __init__(self, pattern: str) -> None: ...
    def search(self, text: str, pos: int = 0) -> RegexMatch | None: ...
    def findall(self, text: str) -> List[RegexMatch]: ...
    def split(self, group_name: str) -> List[str]: ...
    def split_without_captures(self, group_name: str) -> List[str]: ...

class RegexMatch:
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def len(self) -> int: ...
    def get(self, group_index: int) -> MatchGroup | None: ...
    def get_by_name(self, group_name: str) -> MatchGroup | None: ...

class MatchGroup:
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def len(self) -> int: ...
